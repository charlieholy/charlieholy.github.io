case1:
cp test.flv /mnt/hgfs/ubuntu/resource
chrome://https://ossrs.net/srs.release/releases/
rtmp://192.168.1.3/live/test

case2:
alias ffmpeg_pushfile='pushf(){ ffmpeg -re -i $1 -acodec copy -vcodec copy -f flv rtmp://charlieholy/live/livestream;};pushf'
ffplay rtmp://charlieholy/live/livestream

case3:
crtmpserver/docs/simpleLive/simpleLive.html
rtmp://192.168.1.3/live/livestream.    [server/app][stream]
ffplay rtmp://charlieholy/live/livestream

case4:
cp trailer.mp4 /mnt/hgfs/ubuntu/resource
chrome://https://ossrs.net/srs.release/releases/
rtmp://192.168.1.3/live/mp4:trailer.mp4

case5:
cp tt.mp3 /mnt/hgfs/ubuntu/resource
chrome://https://ossrs.net/srs.release/releases/
rtmp://192.168.0.111/live/mp3:tt


dumprecv
//////////
bool BaseRTMPProtocol::SignalInputData(IOBuffer &buffer) {
	if (_enqueueForDelete)
		return true;

	IOBuffer temp;
	temp.ReadFromBuffer(
			GETIBPOINTER(buffer),
			GETAVAILABLEBYTESCOUNT(buffer));
    INFO("resv [%s]",STR(temp.ToString()));
//////////////
bool IOBuffer::WriteToTCPFd(int32_t fd, uint32_t size, int32_t &sentAmount) {
 SANITY_INPUT_BUFFER;
 bool result = true;
 if (_sendLimit != 0xffffffff) {
  size = size > _sendLimit ? _sendLimit : size;
 }

 IOBuffer temp;
 temp.ReadFromBuffer(
   GETIBPOINTER(*this),
   GETAVAILABLEBYTESCOUNT(*this));
    INFO("send [%s]",STR(temp.ToString()));
  ///////
  *(uint8_t(*)[21])pSPS
  *(char(*)[8])&(pCapabilities->videoCodecId).   == 0,0,0,0,0,'T','P','V'
  ///////////////
  endpoint
  recvAmount = recv(fd, (char *) (_pBuffer + _published), expected, MSG_NOSIGNAL);
  ////////////////
